from music21 import stream, note, chord


def generate_sequence(
    model, seed_sequence, int_to_note, sequence_length, generation_length=500
):
    """Generate a new music sequence of specified length"""
    generated_sequence = []

    for _ in range(generation_length):
        prediction_input = np.reshape(seed_sequence, (1, sequence_length))
        prediction = model.predict(prediction_input, verbose=0)

        index = np.argmax(prediction)
        result = int_to_note[index]
        generated_sequence.append(result)

        seed_sequence.append(index)
        seed_sequence = seed_sequence[1 : len(seed_sequence)]

    return generated_sequence


# Select a seed sequence
start = np.random.randint(0, len(network_input) - 1)
seed_sequence = list(network_input[start])

# Mapping from integers back to notes
int_to_note = dict((number, note) for number, note in enumerate(unique_notes))

# Generate a sequence
generated_sequence = generate_sequence(
    model, seed_sequence, int_to_note, sequence_length
)


def sequence_to_midi(generated_sequence, output_file="generated_output.mid"):
    """Convert the generated sequence into a MIDI file"""
    offset = 0
    output_notes = []

    # Create note and chord objects based on the values generated by the model
    for pattern in generated_sequence:
        # Pattern is a chord
        if ("." in pattern) or pattern.isdigit():
            notes_in_chord = pattern.split(".")
            notes = []
            for current_note in notes_in_chord:
                new_note = note.Note(int(current_note))
                new_note.storedInstrument = instrument.Piano()
                notes.append(new_note)
            new_chord = chord.Chord(notes)
            new_chord.offset = offset
            output_notes.append(new_chord)
        # Pattern is a note
        else:
            new_note = note.Note(pattern)
            new_note.offset = offset
            new_note.storedInstrument = instrument.Piano()
            output_notes.append(new_note)

        # Increase offset each iteration to prevent notes from stacking
        offset += 0.5

    midi_stream = stream.Stream(output_notes)
    midi_stream.write("midi", fp=output_file)


# Convert the generated sequence to MIDI
sequence_to_midi(generated_sequence)
